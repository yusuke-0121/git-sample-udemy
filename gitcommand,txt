
git clone
   --mirro 移行などで利用

git clone -b ブランチ名 gitURL 追加する新規フォルダ名

git add . or 対象ファイル
git commit -m "branch main"
git push

git push origin practice
  -u  --set-upstream  //同じ意味 
                      //上流のgithubを規定できるので次回以降はpushを利用したままで進めることができる。

git branch //#ブランチ一覧を見る

git branch <new> //新ブランチ作成

git branch -m <old> <new> //ブランチ名変更

git switch <ブランチ名>  //ブランチを切替 

git switch -c <ブランチ名>  //新ブランチ作成＋切替

git branch -d <ブランチ名> //ブランチの削除

git checkout //ブランチを切り替えるコマンド。機能が多すぎるので、switchをよく使う

git branch -vv どこのbranchにアップロードさせるのか

git push --set-upstream origin practice  --set-upstreamを追加する
git push origin practice

git merge <branch>  //カレントブランチにいて、どこかの別のブランチをマージしたい時に利用

git status  // ファイルに更新状況を確認する

git log //コミットの履歴を確認する
  --oneline
  --graph

git diff  //変更点を確認 differenceの意味

git diff main practice

git diff commitid1  commitid2



git pull origin practice　githubの差分をlocalにマージするコマンド (fetch + merge)

remoteTrackingBranch 差分追跡ブランチ


git add 前
⇒git clean -f cancel/before-add1.html

git push後にlocalで更新した箇所を削除する(※cleanではコミット後の文字の差分は消せない⇒ファイル新規作成は消せるけど、ファイル内部の差分は消せない)
git restore ファイル名パス

git add後の取り消し
git restore --staged ./cancel/add1.html
git reset ./cancel/add1.html 

commitをなかったことにする。addした状態に戻す
git reset --soft HEAD^

commitをなかったことにする。addより前に戻す
git reset --mixed HEAD^

commitをなかったことにする。更新前に戻す(更新したファイルは削除される)
git reset --hard HEAD^

idを指定できるが、その時には最新のひとつ前のもの(戻したい時点を指定する)
git reset --soft 1d704a42122c772b3aae086d66fbaf20bdf81c0f


gitのpushの取り消し　戻る
git revert 5d1d7a2

gitのpushの取り消し　上書き
git reset --soft HEAD^  
git push -f origin practice


Pull Requestの削除(※ブランチごと削除するコマンド)　
Pull　Requestを実施する前にする＋Pull Request実施(マージ前)に実施するコマンド
git push --delete origin practice


Github上でRevertを実施する

Git上で修正している際に、別のブランチに移動したりしない。


git commit --amend -m "修正のコメント"













